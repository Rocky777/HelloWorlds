package com.vs.vsadmin;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;
import com.vs.service.VSAdminService;
import com.vs.service.VSProductAttribute;
import com.vs.service.VsSubmenuCatogarization;

public class AttributesAssinerUIGen extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Button button_1;
	@AutoGenerated
	private VerticalLayout attributesVerticalLayout_2;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;
	@AutoGenerated
	private ComboBox subMneuCatComboBox_1;
	private VSAdminService vsAdminService;
	private Map<String, VSProductAttribute> map = new HashMap<String, VSProductAttribute>();
	private Map<Boolean, VSProductAttribute> allAttributesMap = new HashMap<Boolean, VSProductAttribute>();
	private VsSubmenuCatogarization vsSubmenuCatogarization;
	public AttributesAssinerUIGen(VSAdminService vsAdminService) {
		this.vsAdminService = vsAdminService;
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	@SuppressWarnings("deprecation")
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// subMneuCatComboBox_1
		subMneuCatComboBox_1 = new ComboBox();
		subMneuCatComboBox_1.setCaption("Select Menu Item");
		subMneuCatComboBox_1.setImmediate(true);
		subMneuCatComboBox_1.setWidth("-1px");
		subMneuCatComboBox_1.setHeight("-1px");
		subMneuCatComboBox_1.addListener(new Property.ValueChangeListener() {



			@Override
			public void valueChange(ValueChangeEvent event) {
				attributesVerticalLayout_2.removeAllComponents();
				horizontalLayout_1.removeAllComponents();
				vsSubmenuCatogarization = (VsSubmenuCatogarization) subMneuCatComboBox_1.getValue();
				Set<VSProductAttribute> vsProductAttributes =null;
				boolean hasAttributes = false;
				System.out.println(vsSubmenuCatogarization.getVsProductAttributes().size()+"/////////////////////*/");
				Set<VSProductAttribute> allAttributes = vsAdminService.getAllAttributes();;
				if(vsSubmenuCatogarization.getVsProductAttributes()!=null&&vsSubmenuCatogarization.getVsProductAttributes().size()!=0){
					vsProductAttributes = vsSubmenuCatogarization.getVsProductAttributes();
					hasAttributes = true;
				}else{
					vsProductAttributes = allAttributes;
					hasAttributes = false;
				}
				System.out.println(vsProductAttributes.size()+"------Att-------"+hasAttributes);
				int i=0;
				for(VSProductAttribute vsProductAttribute : vsProductAttributes){
					i++;
					CheckBox checkBox = new CheckBox(vsProductAttribute.getAttributeName());
					horizontalLayout_1.addComponent(checkBox);
					checkBox.setId("Attrbute"+i);
					map.put("Attrbute"+i, vsProductAttribute);
					if(hasAttributes){
						checkBox.setValue(true);
					}
					System.out.println("---Check------"+"Attrbute"+i);
				}

				Set<VSProductAttribute> productAttributes = getOtherAttributes(allAttributes,vsProductAttributes);

				for(VSProductAttribute vsProductAttribute : productAttributes){
					i++;
					CheckBox checkBox = new CheckBox(vsProductAttribute.getAttributeName());
					horizontalLayout_1.addComponent(checkBox);
					checkBox.setId("Attrbute"+i);
					map.put("Attrbute"+i, vsProductAttribute);
					System.out.println("---NoCheck------"+"Attrbute"+i);
				}
				attributesVerticalLayout_2.addComponent(horizontalLayout_1);
			}
		});
		mainLayout.addComponent(subMneuCatComboBox_1);

		// attributesVerticalLayout_2
		attributesVerticalLayout_2 = buildAttributesVerticalLayout_2();
		mainLayout.addComponent(attributesVerticalLayout_2);

		// button_1
		button_1 = new Button();
		button_1.setCaption("Save With Attributes");
		button_1.setImmediate(false);
		button_1.setWidth("-1px");
		button_1.setHeight("-1px");
		button_1.addClickListener(new ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {

				Iterator<Component> iterator = horizontalLayout_1.iterator();
				Set<VSProductAttribute> selectedVsProductAttributes = new HashSet<VSProductAttribute>();
				while (iterator.hasNext()) {
					Component component = iterator.next();
					CheckBox checkBox = (CheckBox) component;
					if(checkBox.getValue()){
						VSProductAttribute vsProductAttribute = map.get(checkBox.getId());
						selectedVsProductAttributes.add(vsProductAttribute);
					}
				}
				System.out.println(selectedVsProductAttributes.size()+"---------UI-----");
				vsSubmenuCatogarization.setVsProductAttributes(selectedVsProductAttributes);
				boolean b = vsAdminService.updateSubmenuCatogarization(vsSubmenuCatogarization);
				Notification.show("Update Status :"+b, Type.TRAY_NOTIFICATION);
			}
		});
		mainLayout.addComponent(button_1);

		return mainLayout;
	}
	public void setUpdatedMenusInComponent(){
		Set<VsSubmenuCatogarization> vsSubmenuCatogarizations = vsAdminService.getAllSubmenuCatogarizations();
		System.out.println(vsSubmenuCatogarizations.size()+"--SubCat-----UI"+"----------"+vsSubmenuCatogarizations.iterator().next().getVsProductAttributes());
		BeanItemContainer<VsSubmenuCatogarization> beanItemContainer = new BeanItemContainer<VsSubmenuCatogarization>(VsSubmenuCatogarization.class, vsSubmenuCatogarizations);
		subMneuCatComboBox_1.setContainerDataSource(beanItemContainer);
		subMneuCatComboBox_1.setItemCaptionPropertyId("vsSubmenuCatogary");
	}

	@AutoGenerated
	private VerticalLayout buildAttributesVerticalLayout_2() {
		// common part: create layout
		attributesVerticalLayout_2 = new VerticalLayout();
		attributesVerticalLayout_2.setImmediate(true);
		attributesVerticalLayout_2.setWidth("100.0%");
		attributesVerticalLayout_2.setHeight("-1px");
		attributesVerticalLayout_2.setMargin(false);

		// horizontalLayout_1
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(true);
		horizontalLayout_1.setWidth("100.0%");
		horizontalLayout_1.setHeight("-1px");
		horizontalLayout_1.setMargin(true);
		//		attributesVerticalLayout_2.addComponent(horizontalLayout_1);

		return attributesVerticalLayout_2;
	}

	Set<VSProductAttribute> getOtherAttributes(Set<VSProductAttribute> allAttributes,Set<VSProductAttribute> selectedAttributes){

		Set<VSProductAttribute> otherAtttributes = new TreeSet<VSProductAttribute>(allAttributes);
		otherAtttributes.removeAll(selectedAttributes);
		return otherAtttributes;
	}
}
