package com.vs.vsadmin;

import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.event.MouseEvents;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.Image;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vs.service.VSAdminService;
import com.vs.service.VSSubmenu;
import com.vs.service.VsSubmenuCatogarization;

public class SubMenuCatagorizationGen extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;
	private TextField subMenuCatogorizeItem;
	private Table subMenuCatogorizedTable;
	VSAdminService vsAdminService;
	private ComboBox comboBox;
	
	public SubMenuCatagorizationGen(VSAdminService vsAdminService) {
		this.vsAdminService = vsAdminService;
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	@SuppressWarnings("deprecation")
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		final VerticalLayout verticalLayout = new VerticalLayout();
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		comboBox = new ComboBox("Sub Menu Items");
		comboBox.setImmediate(true);
		comboBox.addListener(new Property.ValueChangeListener() {
			
			@Override
			public void valueChange(ValueChangeEvent event) {
				verticalLayout.removeAllComponents();
				VSSubmenu vsSubmenu = (VSSubmenu) comboBox.getValue();
				verticalLayout.setCaption(vsSubmenu.getSubMenu());
				verticalLayout.addComponent(buildSubMenuCatogizationsForm());
			}
		});
		mainLayout.addComponent(comboBox);
		mainLayout.addComponent(verticalLayout);
		return mainLayout;
	}
	public void setUpdatedSubMenusInComponent(){
		Set<VSSubmenu> vsSubmenus = vsAdminService.getAllSubMenuItems();
		System.out.println(vsSubmenus.size()+"--Sub-----UI");
		BeanItemContainer<VSSubmenu> beanItemContainer = new BeanItemContainer<VSSubmenu>(VSSubmenu.class, vsSubmenus);
		comboBox.setContainerDataSource(beanItemContainer);
		comboBox.setItemCaptionPropertyId("subMenu");
	}
	public FormLayout buildSubMenuCatogizationsForm(){

		FormLayout formLayout = new FormLayout();
		formLayout.setStyleName("catogirationsOfSubMenuItems");
		formLayout.setCaption("SubMenuCatogizations");
		subMenuCatogorizeItem = new TextField("New CatogorizedSubMenu Item");
		Button saveSubMenuCatogorizeItem = new Button("Save CatogorizedSubMenu Item");
		Button addSubMenuCatogorizeItem = new Button("Add CatogorizedSubMenu sItem");
		addSubMenuCatogorizeItem.setImmediate(true);
		subMenuCatogorizedTable = new Table();
		subMenuCatogorizedTable.setImmediate(true);
		addSubMenuCatogorizeItem.addClickListener(new ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {

				int tableSize = subMenuCatogorizedTable.size();
System.out.println("sssssssssssssss");
				Image image = new Image();
				image.setImmediate(true);
				image.setStyleName("closeIcon");
				image.setSource(new ThemeResource("images/close.ico"));
				image.addClickListener(new MouseEvents.ClickListener() {

					@Override
					public void click(com.vaadin.event.MouseEvents.ClickEvent event) {
						System.out.println(event.getComponent().getId());
						Image object = (Image) event.getComponent();
						subMenuCatogorizedTable.removeItem(object.getData());				
					}
				});
				System.out.println(subMenuCatogorizeItem.getValue()+"999999999999");
				Object object =subMenuCatogorizedTable.addItem(new Object[]{subMenuCatogorizeItem.getValue(),image}, tableSize++);
				image.setData(object);

			}
		});
		subMenuCatogorizedTable.addContainerProperty("CatogorizedSubMenu Item", String.class, null);
		subMenuCatogorizedTable.addContainerProperty("", Image.class, null);
		saveSubMenuCatogorizeItem.addClickListener(new Button.ClickListener() {

			@Override
			public void buttonClick(Button.ClickEvent event) {
				Collection<?> itemIds = subMenuCatogorizedTable.getItemIds();
				Iterator<?> itemIdsIterator = itemIds.iterator();
				Set<VsSubmenuCatogarization> vsSubmenuCatogarizations = new HashSet<VsSubmenuCatogarization>();
				while (itemIdsIterator.hasNext()) {
					Object itemId = (Object) itemIdsIterator.next();
					Item item = subMenuCatogorizedTable.getItem(itemId);
					Property property = item.getItemProperty("CatogorizedSubMenu Item");
					System.out.println(property.getValue());
					VsSubmenuCatogarization vsSubmenuCatogarization = new  VsSubmenuCatogarization();
					vsSubmenuCatogarization.setVsSubmenuCatogary(property.getValue().toString());
					vsSubmenuCatogarizations.add(vsSubmenuCatogarization);
				}
				VSSubmenu vsSubmenu = (VSSubmenu) comboBox.getValue();
				Boolean status = vsAdminService.saveSubmenuCatogarizations(vsSubmenuCatogarizations, vsSubmenu.getId());
				if(status){
					subMenuCatogorizedTable.removeAllItems();
				}
				Notification.show(status.toString(), Type.TRAY_NOTIFICATION);
			}
		});
		formLayout.addComponents(subMenuCatogorizeItem,addSubMenuCatogorizeItem,subMenuCatogorizedTable,saveSubMenuCatogorizeItem);
		return formLayout;
	
	}
}
