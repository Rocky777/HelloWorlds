package com.vs.vsadmin;

import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.event.MouseEvents;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.Image;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vs.service.VSAdminService;
import com.vs.service.VSMenu;
import com.vs.service.VSSubmenu;

public class SubMenuGen extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	private TextField subMenuItem;
	private Table subMenuTable;
	VSAdminService vsAdminService;
	private ComboBox comboBox;

	public SubMenuGen(VSAdminService vsAdminService) {
		this.vsAdminService = vsAdminService;
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	@SuppressWarnings("deprecation")
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
	
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		buildComboxWithData();
		return mainLayout;
	}

@SuppressWarnings("deprecation")
public void buildComboxWithData(){
	
	final VerticalLayout verticalLayout = new VerticalLayout();
	comboBox = new ComboBox("Main Menu Items");
	comboBox.setImmediate(true);
	mainLayout.addComponent(comboBox);
	mainLayout.addComponent(verticalLayout);
	comboBox.addListener(new Property.ValueChangeListener() {
		
		@Override
		public void valueChange(ValueChangeEvent event) {
			verticalLayout.removeAllComponents();
			System.out.println(comboBox.getValue());
			verticalLayout.addComponent(bulidSubMenuRegisterationForm());
		}
	});
}

	public void setUpdatedMainMenusInComponent(){
		Set<VSMenu> vsMenus = vsAdminService.getAllMainMenuItems();
		System.out.println(vsMenus.size()+"-------UI");
		BeanItemContainer<VSMenu> beanItemContainer = new BeanItemContainer<VSMenu>(VSMenu.class, vsMenus);
		comboBox.setContainerDataSource(beanItemContainer);
		comboBox.setItemCaptionPropertyId("mainMenu");
	}
	public FormLayout bulidSubMenuRegisterationForm(){
		
		FormLayout formLayout = new FormLayout();
		formLayout.setCaption("SubMenu Registeration");
		formLayout.setStyleName("subMenuItems");
		subMenuItem = new TextField("New SubMenu Item");
		Button addSubMenuItem = new Button("Add SubMain Menu Item");
		subMenuTable = new Table();
		subMenuTable.setImmediate(true);
		subMenuTable.addContainerProperty("SubMain Item", String.class, null);
		subMenuTable.addContainerProperty("", Image.class, null);
		Button saveSubMenuItem = new Button("Save SubMain Menu Item");
		saveSubMenuItem.addClickListener(new Button.ClickListener() {

			@Override
			public void buttonClick(Button.ClickEvent event) {
				Collection<?> itemIds = subMenuTable.getItemIds();
				Iterator<?> itemIdsIterator = itemIds.iterator();
				Set<VSSubmenu> submenus = new HashSet<VSSubmenu>();
				while (itemIdsIterator.hasNext()) {
					Object itemId = (Object) itemIdsIterator.next();
					Item item = subMenuTable.getItem(itemId);
					Property property = item.getItemProperty("SubMain Item");
					System.out.println(property.getValue());
					VSSubmenu vsSubmenu = new VSSubmenu();
					vsSubmenu.setSubMenu(property.getValue().toString());
					submenus.add(vsSubmenu);
				}
				VSMenu vsMenu = (VSMenu) comboBox.getValue();
				int vsMenuId = vsMenu.getId();
				Boolean status = vsAdminService.saveSubMenuItems(submenus, vsMenuId);
				if(status){
					subMenuTable.removeAllItems();
				}
				Notification.show(status.toString(), Type.TRAY_NOTIFICATION);
			}
		});
		addSubMenuItem.addClickListener(new Button.ClickListener() {

			@Override
			public void buttonClick(Button.ClickEvent event) {

				int tableSize = subMenuTable.size();
				Image image = new Image();
				image.setImmediate(true);
				image.setStyleName("closeIcon");
				image.setSource(new ThemeResource("images/close.ico"));
				image.addClickListener(new MouseEvents.ClickListener() {

					@Override
					public void click(com.vaadin.event.MouseEvents.ClickEvent event) {
						System.out.println(event.getComponent().getId());
						Image object = (Image) event.getComponent();
						subMenuTable.removeItem(object.getData());				
					}
				});

				Object object = subMenuTable.addItem(new Object[]{subMenuItem.getValue(),image}, tableSize++);
				image.setData(object);
			}
		});
		formLayout.addComponents(subMenuItem,addSubMenuItem,subMenuTable,saveSubMenuItem);
		return formLayout;
	}
}
